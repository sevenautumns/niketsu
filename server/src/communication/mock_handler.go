// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package communication is a generated GoMock package.
package communication

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/sevenautumns/niketsu/server/src/config"
)

// MockServerStateHandler is a mock of ServerStateHandler interface.
type MockServerStateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockServerStateHandlerMockRecorder
}

// MockServerStateHandlerMockRecorder is the mock recorder for MockServerStateHandler.
type MockServerStateHandlerMockRecorder struct {
	mock *MockServerStateHandler
}

// NewMockServerStateHandler creates a new mock instance.
func NewMockServerStateHandler(ctrl *gomock.Controller) *MockServerStateHandler {
	mock := &MockServerStateHandler{ctrl: ctrl}
	mock.recorder = &MockServerStateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerStateHandler) EXPECT() *MockServerStateHandlerMockRecorder {
	return m.recorder
}

// AppendRoom mocks base method.
func (m *MockServerStateHandler) AppendRoom(room RoomStateHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendRoom", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendRoom indicates an expected call of AppendRoom.
func (mr *MockServerStateHandlerMockRecorder) AppendRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRoom", reflect.TypeOf((*MockServerStateHandler)(nil).AppendRoom), room)
}

// BroadcastStatusList mocks base method.
func (m *MockServerStateHandler) BroadcastStatusList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastStatusList")
}

// BroadcastStatusList indicates an expected call of BroadcastStatusList.
func (mr *MockServerStateHandlerMockRecorder) BroadcastStatusList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastStatusList", reflect.TypeOf((*MockServerStateHandler)(nil).BroadcastStatusList))
}

// CreateOrFindRoom mocks base method.
func (m *MockServerStateHandler) CreateOrFindRoom(roomName string) (RoomStateHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrFindRoom", roomName)
	ret0, _ := ret[0].(RoomStateHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrFindRoom indicates an expected call of CreateOrFindRoom.
func (mr *MockServerStateHandlerMockRecorder) CreateOrFindRoom(roomName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrFindRoom", reflect.TypeOf((*MockServerStateHandler)(nil).CreateOrFindRoom), roomName)
}

// DeleteRoom mocks base method.
func (m *MockServerStateHandler) DeleteRoom(room RoomStateHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockServerStateHandlerMockRecorder) DeleteRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockServerStateHandler)(nil).DeleteRoom), room)
}

// Init mocks base method.
func (m *MockServerStateHandler) Init(roomConfigs map[string]config.RoomConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", roomConfigs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServerStateHandlerMockRecorder) Init(roomConfigs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockServerStateHandler)(nil).Init), roomConfigs)
}

// IsPasswordCorrect mocks base method.
func (m *MockServerStateHandler) IsPasswordCorrect(password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPasswordCorrect", password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPasswordCorrect indicates an expected call of IsPasswordCorrect.
func (mr *MockServerStateHandlerMockRecorder) IsPasswordCorrect(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPasswordCorrect", reflect.TypeOf((*MockServerStateHandler)(nil).IsPasswordCorrect), password)
}

// Shutdown mocks base method.
func (m *MockServerStateHandler) Shutdown(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServerStateHandlerMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockServerStateHandler)(nil).Shutdown), ctx)
}
