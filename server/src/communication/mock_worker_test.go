// Code generated by MockGen. DO NOT EDIT.
// Source: server/src/communication/worker.go

// Package communication is a generated GoMock package.
package communication

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockClientWorker is a mock of ClientWorker interface.
type MockClientWorker struct {
	ctrl     *gomock.Controller
	recorder *MockClientWorkerMockRecorder
}

// MockClientWorkerMockRecorder is the mock recorder for MockClientWorker.
type MockClientWorkerMockRecorder struct {
	mock *MockClientWorker
}

// NewMockClientWorker creates a new mock instance.
func NewMockClientWorker(ctrl *gomock.Controller) *MockClientWorker {
	mock := &MockClientWorker{ctrl: ctrl}
	mock.recorder = &MockClientWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWorker) EXPECT() *MockClientWorkerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientWorker) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientWorkerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientWorker)(nil).Close))
}

// DeleteWorkerFromRoom mocks base method.
func (m *MockClientWorker) DeleteWorkerFromRoom() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteWorkerFromRoom")
}

// DeleteWorkerFromRoom indicates an expected call of DeleteWorkerFromRoom.
func (mr *MockClientWorkerMockRecorder) DeleteWorkerFromRoom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkerFromRoom", reflect.TypeOf((*MockClientWorker)(nil).DeleteWorkerFromRoom))
}

// EstimatePosition mocks base method.
func (m *MockClientWorker) EstimatePosition() *uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatePosition")
	ret0, _ := ret[0].(*uint64)
	return ret0
}

// EstimatePosition indicates an expected call of EstimatePosition.
func (mr *MockClientWorkerMockRecorder) EstimatePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatePosition", reflect.TypeOf((*MockClientWorker)(nil).EstimatePosition))
}

// LoggedIn mocks base method.
func (m *MockClientWorker) LoggedIn() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoggedIn")
	ret0, _ := ret[0].(bool)
	return ret0
}

// LoggedIn indicates an expected call of LoggedIn.
func (mr *MockClientWorkerMockRecorder) LoggedIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggedIn", reflect.TypeOf((*MockClientWorker)(nil).LoggedIn))
}

// Login mocks base method.
func (m *MockClientWorker) Login() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login")
}

// Login indicates an expected call of Login.
func (mr *MockClientWorkerMockRecorder) Login() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClientWorker)(nil).Login))
}

// SendMessage mocks base method.
func (m *MockClientWorker) SendMessage(payload []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", payload)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockClientWorkerMockRecorder) SendMessage(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClientWorker)(nil).SendMessage), payload)
}

// SendPlaylist mocks base method.
func (m *MockClientWorker) SendPlaylist() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendPlaylist")
}

// SendPlaylist indicates an expected call of SendPlaylist.
func (mr *MockClientWorkerMockRecorder) SendPlaylist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPlaylist", reflect.TypeOf((*MockClientWorker)(nil).SendPlaylist))
}

// SendSeek mocks base method.
func (m *MockClientWorker) SendSeek(desync bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendSeek", desync)
}

// SendSeek indicates an expected call of SendSeek.
func (mr *MockClientWorkerMockRecorder) SendSeek(desync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSeek", reflect.TypeOf((*MockClientWorker)(nil).SendSeek), desync)
}

// SendServerMessage mocks base method.
func (m *MockClientWorker) SendServerMessage(message string, isError bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendServerMessage", message, isError)
}

// SendServerMessage indicates an expected call of SendServerMessage.
func (mr *MockClientWorkerMockRecorder) SendServerMessage(message, isError interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendServerMessage", reflect.TypeOf((*MockClientWorker)(nil).SendServerMessage), message, isError)
}

// SetRoom mocks base method.
func (m *MockClientWorker) SetRoom(room RoomStateHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRoom", room)
}

// SetRoom indicates an expected call of SetRoom.
func (mr *MockClientWorkerMockRecorder) SetRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoom", reflect.TypeOf((*MockClientWorker)(nil).SetRoom), room)
}

// SetUserStatus mocks base method.
func (m *MockClientWorker) SetUserStatus(status Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserStatus", status)
}

// SetUserStatus indicates an expected call of SetUserStatus.
func (mr *MockClientWorkerMockRecorder) SetUserStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserStatus", reflect.TypeOf((*MockClientWorker)(nil).SetUserStatus), status)
}

// SetVideoState mocks base method.
func (m *MockClientWorker) SetVideoState(videoStatus VideoStatus, arrivalTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVideoState", videoStatus, arrivalTime)
}

// SetVideoState indicates an expected call of SetVideoState.
func (mr *MockClientWorkerMockRecorder) SetVideoState(videoStatus, arrivalTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVideoState", reflect.TypeOf((*MockClientWorker)(nil).SetVideoState), videoStatus, arrivalTime)
}

// Start mocks base method.
func (m *MockClientWorker) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockClientWorkerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClientWorker)(nil).Start))
}

// UUID mocks base method.
func (m *MockClientWorker) UUID() *uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(*uuid.UUID)
	return ret0
}

// UUID indicates an expected call of UUID.
func (mr *MockClientWorkerMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockClientWorker)(nil).UUID))
}

// UserStatus mocks base method.
func (m *MockClientWorker) UserStatus() *Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserStatus")
	ret0, _ := ret[0].(*Status)
	return ret0
}

// UserStatus indicates an expected call of UserStatus.
func (mr *MockClientWorkerMockRecorder) UserStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStatus", reflect.TypeOf((*MockClientWorker)(nil).UserStatus))
}
