// Code generated by MockGen. DO NOT EDIT.
// Source: server/src/communication/room.go

// Package communication is a generated GoMock package.
package communication

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRoomStateHandler is a mock of RoomStateHandler interface.
type MockRoomStateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRoomStateHandlerMockRecorder
}

// MockRoomStateHandlerMockRecorder is the mock recorder for MockRoomStateHandler.
type MockRoomStateHandlerMockRecorder struct {
	mock *MockRoomStateHandler
}

// NewMockRoomStateHandler creates a new mock instance.
func NewMockRoomStateHandler(ctrl *gomock.Controller) *MockRoomStateHandler {
	mock := &MockRoomStateHandler{ctrl: ctrl}
	mock.recorder = &MockRoomStateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomStateHandler) EXPECT() *MockRoomStateHandlerMockRecorder {
	return m.recorder
}

// AllUsersReady mocks base method.
func (m *MockRoomStateHandler) AllUsersReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsersReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllUsersReady indicates an expected call of AllUsersReady.
func (mr *MockRoomStateHandlerMockRecorder) AllUsersReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsersReady", reflect.TypeOf((*MockRoomStateHandler)(nil).AllUsersReady))
}

// AppendWorker mocks base method.
func (m *MockRoomStateHandler) AppendWorker(worker ClientWorker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendWorker", worker)
}

// AppendWorker indicates an expected call of AppendWorker.
func (mr *MockRoomStateHandlerMockRecorder) AppendWorker(worker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendWorker", reflect.TypeOf((*MockRoomStateHandler)(nil).AppendWorker), worker)
}

// BroadcastAll mocks base method.
func (m *MockRoomStateHandler) BroadcastAll(message []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastAll", message)
}

// BroadcastAll indicates an expected call of BroadcastAll.
func (mr *MockRoomStateHandlerMockRecorder) BroadcastAll(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastAll", reflect.TypeOf((*MockRoomStateHandler)(nil).BroadcastAll), message)
}

// BroadcastExcept mocks base method.
func (m *MockRoomStateHandler) BroadcastExcept(payload []byte, uuid uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastExcept", payload, uuid)
}

// BroadcastExcept indicates an expected call of BroadcastExcept.
func (mr *MockRoomStateHandlerMockRecorder) BroadcastExcept(payload, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastExcept", reflect.TypeOf((*MockRoomStateHandler)(nil).BroadcastExcept), payload, uuid)
}

// Close mocks base method.
func (m *MockRoomStateHandler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRoomStateHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRoomStateHandler)(nil).Close))
}

// DeleteWorker mocks base method.
func (m *MockRoomStateHandler) DeleteWorker(uuid uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteWorker", uuid)
}

// DeleteWorker indicates an expected call of DeleteWorker.
func (mr *MockRoomStateHandlerMockRecorder) DeleteWorker(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorker", reflect.TypeOf((*MockRoomStateHandler)(nil).DeleteWorker), uuid)
}

// FastestClientPosition mocks base method.
func (m *MockRoomStateHandler) FastestClientPosition() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FastestClientPosition")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// FastestClientPosition indicates an expected call of FastestClientPosition.
func (mr *MockRoomStateHandlerMockRecorder) FastestClientPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastestClientPosition", reflect.TypeOf((*MockRoomStateHandler)(nil).FastestClientPosition))
}

// IsEmpty mocks base method.
func (m *MockRoomStateHandler) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockRoomStateHandlerMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockRoomStateHandler)(nil).IsEmpty))
}

// IsPersistent mocks base method.
func (m *MockRoomStateHandler) IsPersistent() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPersistent")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPersistent indicates an expected call of IsPersistent.
func (mr *MockRoomStateHandlerMockRecorder) IsPersistent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPersistent", reflect.TypeOf((*MockRoomStateHandler)(nil).IsPersistent))
}

// IsPlaylistEmpty mocks base method.
func (m *MockRoomStateHandler) IsPlaylistEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPlaylistEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPlaylistEmpty indicates an expected call of IsPlaylistEmpty.
func (mr *MockRoomStateHandlerMockRecorder) IsPlaylistEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPlaylistEmpty", reflect.TypeOf((*MockRoomStateHandler)(nil).IsPlaylistEmpty))
}

// Name mocks base method.
func (m *MockRoomStateHandler) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRoomStateHandlerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRoomStateHandler)(nil).Name))
}

// RoomState mocks base method.
func (m *MockRoomStateHandler) RoomState() *RoomState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoomState")
	ret0, _ := ret[0].(*RoomState)
	return ret0
}

// RoomState indicates an expected call of RoomState.
func (mr *MockRoomStateHandlerMockRecorder) RoomState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoomState", reflect.TypeOf((*MockRoomStateHandler)(nil).RoomState))
}

// SetLastSeek mocks base method.
func (m *MockRoomStateHandler) SetLastSeek(position uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastSeek", position)
}

// SetLastSeek indicates an expected call of SetLastSeek.
func (mr *MockRoomStateHandlerMockRecorder) SetLastSeek(position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastSeek", reflect.TypeOf((*MockRoomStateHandler)(nil).SetLastSeek), position)
}

// SetPaused mocks base method.
func (m *MockRoomStateHandler) SetPaused(paused bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPaused", paused)
}

// SetPaused indicates an expected call of SetPaused.
func (mr *MockRoomStateHandlerMockRecorder) SetPaused(paused interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaused", reflect.TypeOf((*MockRoomStateHandler)(nil).SetPaused), paused)
}

// SetPlaylistState mocks base method.
func (m *MockRoomStateHandler) SetPlaylistState(video *string, position uint64, paused bool, lastSeek uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlaylistState", video, position, paused, lastSeek)
}

// SetPlaylistState indicates an expected call of SetPlaylistState.
func (mr *MockRoomStateHandlerMockRecorder) SetPlaylistState(video, position, paused, lastSeek interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlaylistState", reflect.TypeOf((*MockRoomStateHandler)(nil).SetPlaylistState), video, position, paused, lastSeek)
}

// SetPosition mocks base method.
func (m *MockRoomStateHandler) SetPosition(position uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPosition", position)
}

// SetPosition indicates an expected call of SetPosition.
func (mr *MockRoomStateHandlerMockRecorder) SetPosition(position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockRoomStateHandler)(nil).SetPosition), position)
}

// SetSpeed mocks base method.
func (m *MockRoomStateHandler) SetSpeed(speed float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSpeed", speed)
}

// SetSpeed indicates an expected call of SetSpeed.
func (mr *MockRoomStateHandlerMockRecorder) SetSpeed(speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSpeed", reflect.TypeOf((*MockRoomStateHandler)(nil).SetSpeed), speed)
}

// Start mocks base method.
func (m *MockRoomStateHandler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockRoomStateHandlerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRoomStateHandler)(nil).Start))
}

// WorkerStatus mocks base method.
func (m *MockRoomStateHandler) WorkerStatus() []Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerStatus")
	ret0, _ := ret[0].([]Status)
	return ret0
}

// WorkerStatus indicates an expected call of WorkerStatus.
func (mr *MockRoomStateHandlerMockRecorder) WorkerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerStatus", reflect.TypeOf((*MockRoomStateHandler)(nil).WorkerStatus))
}
