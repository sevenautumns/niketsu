// Code generated by MockGen. DO NOT EDIT.
// Source: room.go
//
// Generated by this command:
//
//	mockgen -source room.go -destination mock_room.go -package communication
//
// Package communication is a generated GoMock package.
package communication

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomStateHandler is a mock of RoomStateHandler interface.
type MockRoomStateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRoomStateHandlerMockRecorder
}

// MockRoomStateHandlerMockRecorder is the mock recorder for MockRoomStateHandler.
type MockRoomStateHandlerMockRecorder struct {
	mock *MockRoomStateHandler
}

// NewMockRoomStateHandler creates a new mock instance.
func NewMockRoomStateHandler(ctrl *gomock.Controller) *MockRoomStateHandler {
	mock := &MockRoomStateHandler{ctrl: ctrl}
	mock.recorder = &MockRoomStateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomStateHandler) EXPECT() *MockRoomStateHandlerMockRecorder {
	return m.recorder
}

// AppendWorker mocks base method.
func (m *MockRoomStateHandler) AppendWorker(worker ClientWorker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendWorker", worker)
}

// AppendWorker indicates an expected call of AppendWorker.
func (mr *MockRoomStateHandlerMockRecorder) AppendWorker(worker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendWorker", reflect.TypeOf((*MockRoomStateHandler)(nil).AppendWorker), worker)
}

// BroadcastAll mocks base method.
func (m *MockRoomStateHandler) BroadcastAll(message []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastAll", message)
}

// BroadcastAll indicates an expected call of BroadcastAll.
func (mr *MockRoomStateHandlerMockRecorder) BroadcastAll(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastAll", reflect.TypeOf((*MockRoomStateHandler)(nil).BroadcastAll), message)
}

// BroadcastExcept mocks base method.
func (m *MockRoomStateHandler) BroadcastExcept(payload []byte, workerUUID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastExcept", payload, workerUUID)
}

// BroadcastExcept indicates an expected call of BroadcastExcept.
func (mr *MockRoomStateHandlerMockRecorder) BroadcastExcept(payload, workerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastExcept", reflect.TypeOf((*MockRoomStateHandler)(nil).BroadcastExcept), payload, workerUUID)
}

// Close mocks base method.
func (m *MockRoomStateHandler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRoomStateHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRoomStateHandler)(nil).Close))
}

// DeleteWorker mocks base method.
func (m *MockRoomStateHandler) DeleteWorker(workerUUID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteWorker", workerUUID)
}

// DeleteWorker indicates an expected call of DeleteWorker.
func (mr *MockRoomStateHandlerMockRecorder) DeleteWorker(workerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorker", reflect.TypeOf((*MockRoomStateHandler)(nil).DeleteWorker), workerUUID)
}

// HandleCache mocks base method.
func (m *MockRoomStateHandler) HandleCache(cache bool, workerUUID uuid.UUID, username string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCache", cache, workerUUID, username)
}

// HandleCache indicates an expected call of HandleCache.
func (mr *MockRoomStateHandlerMockRecorder) HandleCache(cache, workerUUID, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCache", reflect.TypeOf((*MockRoomStateHandler)(nil).HandleCache), cache, workerUUID, username)
}

// IsEmpty mocks base method.
func (m *MockRoomStateHandler) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockRoomStateHandlerMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockRoomStateHandler)(nil).IsEmpty))
}

// Name mocks base method.
func (m *MockRoomStateHandler) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRoomStateHandlerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRoomStateHandler)(nil).Name))
}

// Ready mocks base method.
func (m *MockRoomStateHandler) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockRoomStateHandlerMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockRoomStateHandler)(nil).Ready))
}

// RoomConfig mocks base method.
func (m *MockRoomStateHandler) RoomConfig() RoomConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoomConfig")
	ret0, _ := ret[0].(RoomConfig)
	return ret0
}

// RoomConfig indicates an expected call of RoomConfig.
func (mr *MockRoomStateHandlerMockRecorder) RoomConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoomConfig", reflect.TypeOf((*MockRoomStateHandler)(nil).RoomConfig))
}

// RoomState mocks base method.
func (m *MockRoomStateHandler) RoomState() RoomState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoomState")
	ret0, _ := ret[0].(RoomState)
	return ret0
}

// RoomState indicates an expected call of RoomState.
func (mr *MockRoomStateHandlerMockRecorder) RoomState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoomState", reflect.TypeOf((*MockRoomStateHandler)(nil).RoomState))
}

// SetLastSeek mocks base method.
func (m *MockRoomStateHandler) SetLastSeek(position Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastSeek", position)
}

// SetLastSeek indicates an expected call of SetLastSeek.
func (mr *MockRoomStateHandlerMockRecorder) SetLastSeek(position any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastSeek", reflect.TypeOf((*MockRoomStateHandler)(nil).SetLastSeek), position)
}

// SetPaused mocks base method.
func (m *MockRoomStateHandler) SetPaused(paused bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPaused", paused)
}

// SetPaused indicates an expected call of SetPaused.
func (mr *MockRoomStateHandlerMockRecorder) SetPaused(paused any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaused", reflect.TypeOf((*MockRoomStateHandler)(nil).SetPaused), paused)
}

// SetPlaylist mocks base method.
func (m *MockRoomStateHandler) SetPlaylist(playlist []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlaylist", playlist)
}

// SetPlaylist indicates an expected call of SetPlaylist.
func (mr *MockRoomStateHandlerMockRecorder) SetPlaylist(playlist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlaylist", reflect.TypeOf((*MockRoomStateHandler)(nil).SetPlaylist), playlist)
}

// SetPlaylistState mocks base method.
func (m *MockRoomStateHandler) SetPlaylistState(video *string, position Duration, paused *bool, lastSeek *Duration, speed *float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlaylistState", video, position, paused, lastSeek, speed)
}

// SetPlaylistState indicates an expected call of SetPlaylistState.
func (mr *MockRoomStateHandlerMockRecorder) SetPlaylistState(video, position, paused, lastSeek, speed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlaylistState", reflect.TypeOf((*MockRoomStateHandler)(nil).SetPlaylistState), video, position, paused, lastSeek, speed)
}

// SetPosition mocks base method.
func (m *MockRoomStateHandler) SetPosition(position Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPosition", position)
}

// SetPosition indicates an expected call of SetPosition.
func (mr *MockRoomStateHandlerMockRecorder) SetPosition(position any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockRoomStateHandler)(nil).SetPosition), position)
}

// SetSpeed mocks base method.
func (m *MockRoomStateHandler) SetSpeed(speed float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSpeed", speed)
}

// SetSpeed indicates an expected call of SetSpeed.
func (mr *MockRoomStateHandlerMockRecorder) SetSpeed(speed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSpeed", reflect.TypeOf((*MockRoomStateHandler)(nil).SetSpeed), speed)
}

// SetWorkerStatus mocks base method.
func (m *MockRoomStateHandler) SetWorkerStatus(workerUUID uuid.UUID, status Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWorkerStatus", workerUUID, status)
}

// SetWorkerStatus indicates an expected call of SetWorkerStatus.
func (mr *MockRoomStateHandlerMockRecorder) SetWorkerStatus(workerUUID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkerStatus", reflect.TypeOf((*MockRoomStateHandler)(nil).SetWorkerStatus), workerUUID, status)
}

// ShouldBeClosed mocks base method.
func (m *MockRoomStateHandler) ShouldBeClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBeClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldBeClosed indicates an expected call of ShouldBeClosed.
func (mr *MockRoomStateHandlerMockRecorder) ShouldBeClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBeClosed", reflect.TypeOf((*MockRoomStateHandler)(nil).ShouldBeClosed))
}

// Shutdown mocks base method.
func (m *MockRoomStateHandler) Shutdown(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRoomStateHandlerMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRoomStateHandler)(nil).Shutdown), ctx)
}

// SlowestEstimatedClientPosition mocks base method.
func (m *MockRoomStateHandler) SlowestEstimatedClientPosition() *Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlowestEstimatedClientPosition")
	ret0, _ := ret[0].(*Duration)
	return ret0
}

// SlowestEstimatedClientPosition indicates an expected call of SlowestEstimatedClientPosition.
func (mr *MockRoomStateHandlerMockRecorder) SlowestEstimatedClientPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlowestEstimatedClientPosition", reflect.TypeOf((*MockRoomStateHandler)(nil).SlowestEstimatedClientPosition))
}

// Start mocks base method.
func (m *MockRoomStateHandler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockRoomStateHandlerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRoomStateHandler)(nil).Start))
}

// WorkerStatus mocks base method.
func (m *MockRoomStateHandler) WorkerStatus() []Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerStatus")
	ret0, _ := ret[0].([]Status)
	return ret0
}

// WorkerStatus indicates an expected call of WorkerStatus.
func (mr *MockRoomStateHandlerMockRecorder) WorkerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerStatus", reflect.TypeOf((*MockRoomStateHandler)(nil).WorkerStatus))
}
