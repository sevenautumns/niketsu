// Code generated by MockGen. DO NOT EDIT.
// Source: websocket.go
//
// Generated by this command:
//
//	mockgen -source websocket.go -destination mock_websocket.go -package communication
//
// Package communication is a generated GoMock package.
package communication

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebsocketReaderWriter is a mock of WebsocketReaderWriter interface.
type MockWebsocketReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketReaderWriterMockRecorder
}

// MockWebsocketReaderWriterMockRecorder is the mock recorder for MockWebsocketReaderWriter.
type MockWebsocketReaderWriterMockRecorder struct {
	mock *MockWebsocketReaderWriter
}

// NewMockWebsocketReaderWriter creates a new mock instance.
func NewMockWebsocketReaderWriter(ctrl *gomock.Controller) *MockWebsocketReaderWriter {
	mock := &MockWebsocketReaderWriter{ctrl: ctrl}
	mock.recorder = &MockWebsocketReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketReaderWriter) EXPECT() *MockWebsocketReaderWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWebsocketReaderWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWebsocketReaderWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWebsocketReaderWriter)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockWebsocketReaderWriter) ReadMessage() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockWebsocketReaderWriterMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWebsocketReaderWriter)(nil).ReadMessage))
}

// WriteMessage mocks base method.
func (m *MockWebsocketReaderWriter) WriteMessage(payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWebsocketReaderWriterMockRecorder) WriteMessage(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebsocketReaderWriter)(nil).WriteMessage), payload)
}
