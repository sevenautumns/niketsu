// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go

// Package communication is a generated GoMock package.
package communication

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockClientWorker is a mock of ClientWorker interface.
type MockClientWorker struct {
	ctrl     *gomock.Controller
	recorder *MockClientWorkerMockRecorder
}

// MockClientWorkerMockRecorder is the mock recorder for MockClientWorker.
type MockClientWorkerMockRecorder struct {
	mock *MockClientWorker
}

// NewMockClientWorker creates a new mock instance.
func NewMockClientWorker(ctrl *gomock.Controller) *MockClientWorker {
	mock := &MockClientWorker{ctrl: ctrl}
	mock.recorder = &MockClientWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWorker) EXPECT() *MockClientWorkerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientWorker) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientWorkerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientWorker)(nil).Close))
}

// EstimatePosition mocks base method.
func (m *MockClientWorker) EstimatePosition() *uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimatePosition")
	ret0, _ := ret[0].(*uint64)
	return ret0
}

// EstimatePosition indicates an expected call of EstimatePosition.
func (mr *MockClientWorkerMockRecorder) EstimatePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimatePosition", reflect.TypeOf((*MockClientWorker)(nil).EstimatePosition))
}

// SendMessage mocks base method.
func (m *MockClientWorker) SendMessage(payload []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", payload)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockClientWorkerMockRecorder) SendMessage(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClientWorker)(nil).SendMessage), payload)
}

// Shutdown mocks base method.
func (m *MockClientWorker) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockClientWorkerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockClientWorker)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockClientWorker) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockClientWorkerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClientWorker)(nil).Start))
}

// UUID mocks base method.
func (m *MockClientWorker) UUID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// UUID indicates an expected call of UUID.
func (mr *MockClientWorkerMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockClientWorker)(nil).UUID))
}
